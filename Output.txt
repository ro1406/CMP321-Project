==========================================================================================
                                         Part 1
==========================================================================================
Input: ['+', 'a', '1']

 +
/ \
a 1
-----------------------------------------------------------------------------------------------
Input: ['/', ['+', 'x', 'y'], '2']

   /
 /   \
 +   2
/ \
x y
-----------------------------------------------------------------------------------------------
Input: ['*', 'A', ['+', 'B', ['^', 'C', 'D']]]

       *
   /       \
   A       +
         /   \
         B   ^
            / \
            C D
-----------------------------------------------------------------------------------------------
Input: ['+', ['*', ['+', 'a', 'b'], ['-', 'a', 'b']], ['^', ['+', 'a', 'b'], '2']]

       +
   /       \
   *       ^
 /   \   /   \
 +   -   +   2
/ \ / \ / \
a b a b a b
-----------------------------------------------------------------------------------------------
Input: ['-', ['*', '2', ['*', ['^', 'x', '3'], ['^', 'y', '3']]], ['-', ['^', 'x', '2'], ['^', 'y', '2']]]

               -
       /               \
       *               -
   /       \       /       \
   2       *       ^       ^
         /   \   /   \   /   \
         ^   ^   x   2   y   2
        / \ / \
        x 3 y 3
-----------------------------------------------------------------------------------------------
==========================================================================================
                                         Part 2
==========================================================================================
Input: (+ a 1) :
    Infix: (a + 1)
    Prefix: (+ a 1)
    Postfix: (a 1 +)

Input: (/ (+ x y) 2) :
    Infix: ((x + y) / 2)
    Prefix: (/ (+ x y) 2)
    Postfix: ((x y +) 2 /)

Input: (* a (+ b (^ c d))) :
    Infix: (a * (b + (c ^ d)))
    Prefix: (* a (+ b (^ c d)))
    Postfix: (a (b (c d ^) +) *)

Input: (+ (* (+ a b) (- a b)) (^ (+ a b) 2)) :
    Infix: (((a + b) * (a - b)) + ((a + b) ^ 2))
    Prefix: (+ (* (+ a b) (- a b)) (^ (+ a b) 2))
    Postfix: (((a b +) (a b -) *) ((a b +) 2 ^) +)

Input: (- (* 2 (* (^ x 3) (^ y 3))) (- (^ x 2) (^ y 2))) :
    Infix: ((2 * ((x ^ 3) * (y ^ 3))) - ((x ^ 2) - (y ^ 2)))
    Prefix: (- (* 2 (* (^ x 3) (^ y 3))) (- (^ x 2) (^ y 2)))
    Postfix: ((2 ((x 3 ^) (y 3 ^) *) *) ((x 2 ^) (y 2 ^) -) -)

------------------------------------------------------------------------------------------
List(t) where t=BinaryParseTree().fromPostfix('(n 4 ^)') yields: 
['^', 'n', '4']
------------------------------------------------------------------------------------------
==========================================================================================
                                         Part 3
==========================================================================================
((a > b) ? (a : b))
Prefix list representation:
['?', ['>', 'a', 'b'], [':', 'a', 'b']]

   ?
 /   \
 >   :
/ \ / \
a b a b
-----------------------------------------------------------------------------------------------

((x > (2 * y)) ? ((x + y) : (x - y)))
Prefix list representation:
['?', ['>', 'x', ['*', '2', 'y']], [':', ['+', 'x', 'y'], ['-', 'x', 'y']]]

       ?
   /       \
   >       :
 /   \   /   \
 x   *   +   -
    / \ / \ / \
    2 y x y x y
-----------------------------------------------------------------------------------------------

((a > b) ? (((a - b) ^ 2) : ((a + b) ^ 2)))
Prefix list representation:
['?', ['>', 'a', 'b'], [':', ['^', ['-', 'a', 'b'], '2'], ['^', ['+', 'a', 'b'], '2']]]

               ?
       /               \
       >               :
   /       \       /       \
   a       b       ^       ^
                 /   \   /   \
                 -   2   +   2
                / \     / \
                a b     a b
-----------------------------------------------------------------------------------------------